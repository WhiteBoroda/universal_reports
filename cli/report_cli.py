#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –¥–ª—è —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤ Odoo
"""

import sys
import os
import argparse
import json
import logging
from datetime import datetime
from pathlib import Path
import base64

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ Odoo
try:
    import odoo
    from odoo import api, SUPERUSER_ID
    from odoo.exceptions import UserError, ValidationError
except ImportError:
    print("‚ùå –ü–æ–º–∏–ª–∫–∞: Odoo –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ PATH")
    print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Odoo –∞–±–æ –¥–æ–¥–∞–π—Ç–µ —à–ª—è—Ö –¥–æ Odoo –≤ PYTHONPATH")
    sys.exit(1)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('universal_reports_cli.log')
    ]
)
logger = logging.getLogger(__name__)


class ReportCLI:
    """–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–≤—ñ—Ç—ñ–≤"""

    def __init__(self, database, user_id=SUPERUSER_ID):
        self.database = database
        self.user_id = user_id
        self.registry = None
        self.env = None

    def __enter__(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î"""
        try:
            self.registry = odoo.registry(self.database)
            self.env = api.Environment(self.registry.cursor(), self.user_id, {})
            return self
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î '{self.database}': {e}")
            raise

    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
        if self.env:
            self.env.cr.close()

    def list_reports(self, template_only=False, active_only=True):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤"""
        try:
            domain = []
            if template_only:
                domain.append(('is_template', '=', True))
            if active_only:
                domain.append(('active', '=', True))

            reports = self.env['universal.report.builder'].search(domain)

            if not reports:
                print("üìã –ó–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
                return

            print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ –∑–≤—ñ—Ç—ñ–≤: {len(reports)}")
            print("-" * 80)

            for report in reports:
                status = "üü¢" if report.active else "üî¥"
                template_mark = "üìÑ" if report.is_template else "üìä"

                print(f"{status} {template_mark} {report.name}")
                print(f"   ID: {report.id}")
                print(f"   –ú–æ–¥–µ–ª—å: {report.model_id.name} ({report.model_name})")
                print(f"   –ü–æ–ª—ñ–≤: {len(report.field_ids.filtered('visible'))}")
                if report.last_execution:
                    print(f"   –û—Å—Ç–∞–Ω–Ω—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {report.last_execution}")
                    print(f"   –ó–∞–ø–∏—Å—ñ–≤: {report.result_count}")
                print("-" * 80)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–≤—ñ—Ç—ñ–≤: {e}")
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return False

    def execute_report(self, report_identifier, output_file=None, export_format='excel',
                       filters=None, limit=None, preview=False):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤—ñ—Ç—É"""
        try:
            # –ü–æ—à—É–∫ –∑–≤—ñ—Ç—É –∑–∞ ID –∞–±–æ –Ω–∞–∑–≤–æ—é
            if str(report_identifier).isdigit():
                report = self.env['universal.report.builder'].browse(int(report_identifier))
            else:
                report = self.env['universal.report.builder'].search([
                    ('name', '=', report_identifier)
                ], limit=1)

            if not report:
                print(f"‚ùå –ó–≤—ñ—Ç '{report_identifier}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False

            print(f"üöÄ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–≤—ñ—Ç: {report.name}")
            print(f"   –ú–æ–¥–µ–ª—å: {report.model_id.name}")

            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
            context_filters = []
            if filters:
                if isinstance(filters, str):
                    try:
                        context_filters = json.loads(filters)
                    except json.JSONDecodeError:
                        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤")
                        return False
                elif isinstance(filters, list):
                    context_filters = filters

            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤—ñ—Ç—É
            start_time = datetime.now()
            data = report.execute_report(context_filters=context_filters, limit=limit)
            execution_time = (datetime.now() - start_time).total_seconds()

            record_count = len(data) if isinstance(data, list) else 0
            print(f"‚úÖ –ó–≤—ñ—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            print(f"   –ó–∞–ø–∏—Å—ñ–≤: {record_count}")
            print(f"   –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.2f} —Å–µ–∫")

            if preview:
                self._show_preview(data, report)
                return True

            # –ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            if output_file:
                success = self._export_data(data, report, export_format, output_file)
                return success
            else:
                # –í–∏–≤–æ–¥–∏–º–æ –Ω–∞ –µ–∫—Ä–∞–Ω (–æ–±–º–µ–∂–µ–Ω–æ)
                self._print_results(data, report, limit=20)
                return True

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤—ñ—Ç—É: {e}")
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤—ñ—Ç—É: {e}")
            return False

    def create_report_from_config(self, config_file):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É"""
        try:
            config_path = Path(config_file)
            if not config_path.exists():
                print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {config_file}")
                return False

            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)

            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            required_fields = ['name', 'model', 'fields']
            for field in required_fields:
                if field not in config:
                    print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—î –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {field}")
                    return False

            # –ü–æ—à—É–∫ –º–æ–¥–µ–ª—ñ
            model = self.env['ir.model'].search([('model', '=', config['model'])], limit=1)
            if not model:
                print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {config['model']}")
                return False

            print(f"üî® –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∑–≤—ñ—Ç: {config['name']}")

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É
            report_data = {
                'name': config['name'],
                'description': config.get('description', ''),
                'model_id': model.id,
                'is_template': config.get('is_template', False),
                'format_type': config.get('format_type', 'table'),
            }

            report = self.env['universal.report.builder'].create(report_data)

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤
            for seq, field_config in enumerate(config['fields'], 1):
                field_data = {
                    'report_id': report.id,
                    'sequence': seq,
                    'field_name': field_config['name'],
                    'field_label': field_config.get('label', field_config['name']),
                    'visible': field_config.get('visible', True),
                    'format_type': field_config.get('format', 'text'),
                    'aggregation': field_config.get('aggregation', 'none'),
                }
                self.env['universal.report.field'].create(field_data)

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
            if 'filters' in config:
                for seq, filter_config in enumerate(config['filters'], 1):
                    filter_data = {
                        'report_id': report.id,
                        'sequence': seq,
                        'name': filter_config.get('name', f'–§—ñ–ª—å—Ç—Ä {seq}'),
                        'field_name': filter_config['field'],
                        'operator': filter_config.get('operator', '='),
                        'value': filter_config.get('value', ''),
                        'active': filter_config.get('active', True),
                    }
                    self.env['universal.report.filter'].create(filter_data)

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω
            self.env.cr.commit()

            print(f"‚úÖ –ó–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ (ID: {report.id})")
            return report.id

        except Exception as e:
            self.env.cr.rollback()
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É: {e}")
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É: {e}")
            return False

    def schedule_report(self, report_identifier, schedule_config):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è –∑–≤—ñ—Ç—É"""
        try:
            # –ü–æ—à—É–∫ –∑–≤—ñ—Ç—É
            if str(report_identifier).isdigit():
                report = self.env['universal.report.builder'].browse(int(report_identifier))
            else:
                report = self.env['universal.report.builder'].search([
                    ('name', '=', report_identifier)
                ], limit=1)

            if not report:
                print(f"‚ùå –ó–≤—ñ—Ç '{report_identifier}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            scheduler_data = {
                'name': schedule_config.get('name', f'–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è {report.name}'),
                'report_id': report.id,
                'interval_type': schedule_config.get('interval_type', 'days'),
                'interval_number': schedule_config.get('interval_number', 1),
                'execution_time': schedule_config.get('execution_time', 9.0),
                'email_recipients': schedule_config.get('email_recipients', ''),
                'attach_report': schedule_config.get('attach_report', True),
                'active': schedule_config.get('active', True),
            }

            scheduler = self.env['universal.report.scheduler'].create(scheduler_data)
            self.env.cr.commit()

            print(f"‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ (ID: {scheduler.id})")
            print(f"   –Ü–Ω—Ç–µ—Ä–≤–∞–ª: –∫–æ–∂–Ω—ñ {scheduler.interval_number} {scheduler.interval_type}")
            print(f"   –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {scheduler.execution_time}")

            return scheduler.id

        except Exception as e:
            self.env.cr.rollback()
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
            return False

    def _export_data(self, data, report, export_format, output_file):
        """–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª"""
        try:
            output_path = Path(output_file)

            if export_format == 'excel':
                file_data = report.export_to_excel(data)
                with open(output_path, 'wb') as f:
                    f.write(base64.b64decode(file_data))

            elif export_format == 'csv':
                csv_content = self._export_to_csv(data, report)
                with open(output_path, 'w', encoding='utf-8-sig') as f:
                    f.write(csv_content)

            elif export_format == 'json':
                json_content = self._export_to_json(data, report)
                with open(output_path, 'w', encoding='utf-8') as f:
                    f.write(json_content)

            else:
                print(f"‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –µ–∫—Å–ø–æ—Ä—Ç—É: {export_format}")
                return False

            file_size = output_path.stat().st_size
            print(f"üíæ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")
            print(f"   –†–æ–∑–º—ñ—Ä: {file_size:,} –±–∞–π—Ç")

            return True

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
            return False

    def _export_to_csv(self, data, report):
        """–ï–∫—Å–ø–æ—Ä—Ç —É CSV"""
        import csv
        import io

        output = io.StringIO()
        writer = csv.writer(output, delimiter=';', quotechar='"')

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        visible_fields = report.field_ids.filtered('visible').sorted('sequence')
        headers = [f.field_label or f.field_name for f in visible_fields]
        writer.writerow(headers)

        # –î–∞–Ω—ñ
        for record in data:
            row = []
            for field in visible_fields:
                value = record.get(field.field_name, '')
                if isinstance(value, (list, tuple)) and len(value) > 1:
                    value = value[1]
                row.append(str(value) if value is not None else '')
            writer.writerow(row)

        return output.getvalue()

    def _export_to_json(self, data, report):
        """–ï–∫—Å–ø–æ—Ä—Ç —É JSON"""
        export_data = {
            'report_info': {
                'name': report.name,
                'model': report.model_name,
                'generated_at': datetime.now().isoformat(),
                'total_records': len(data) if isinstance(data, list) else 0
            },
            'data': data
        }
        return json.dumps(export_data, default=str, ensure_ascii=False, indent=2)

    def _show_preview(self, data, report, limit=10):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥"""
        visible_fields = report.field_ids.filtered('visible').sorted('sequence')

        print(f"\nüìã –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–≤—ñ—Ç—É: {report.name}")
        print("=" * 80)

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [f.field_label or f.field_name for f in visible_fields]
        print(" | ".join(f"{h[:15]:15}" for h in headers))
        print("-" * 80)

        # –î–∞–Ω—ñ (–æ–±–º–µ–∂–µ–Ω–æ)
        display_data = data[:limit] if isinstance(data, list) else []

        for record in display_data:
            row = []
            for field in visible_fields:
                value = record.get(field.field_name, '')
                if isinstance(value, (list, tuple)) and len(value) > 1:
                    value = value[1]

                str_value = str(value) if value is not None else ''
                row.append(str_value[:15])

            print(" | ".join(f"{cell:15}" for cell in row))

        total_records = len(data) if isinstance(data, list) else 0
        if total_records > limit:
            print(f"\n... —ñ —â–µ {total_records - limit} –∑–∞–ø–∏—Å—ñ–≤")

        print(f"\n–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {total_records}")

    def _print_results(self, data, report, limit=20):
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ –µ–∫—Ä–∞–Ω"""
        self._show_preview(data, report, limit)


def create_sample_config():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É"""
    sample_config = {
        "name": "–ó–≤—ñ—Ç –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö (–ø—Ä–∏–∫–ª–∞–¥)",
        "description": "–ü—Ä–∏–∫–ª–∞–¥ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É",
        "model": "res.partner",
        "format_type": "table",
        "is_template": False,
        "fields": [
            {
                "name": "name",
                "label": "–ù–∞–∑–≤–∞",
                "visible": True,
                "format": "text"
            },
            {
                "name": "email",
                "label": "Email",
                "visible": True,
                "format": "text"
            },
            {
                "name": "phone",
                "label": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "visible": True,
                "format": "text"
            },
            {
                "name": "is_company",
                "label": "–ö–æ–º–ø–∞–Ω—ñ—è",
                "visible": True,
                "format": "boolean"
            }
        ],
        "filters": [
            {
                "name": "–¢—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ",
                "field": "active",
                "operator": "=",
                "value": "True",
                "active": True
            }
        ]
    }

    with open('sample_report_config.json', 'w', encoding='utf-8') as f:
        json.dump(sample_config, f, ensure_ascii=False, indent=2)

    print("üìù –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏–∫–ª–∞–¥ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: sample_report_config.json")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è CLI"""
    parser = argparse.ArgumentParser(
        description='–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤—ñ—Ç—ñ–≤ Odoo - CLI',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:

  # –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–≤—ñ—Ç–∏
  python report_cli.py my_database list

  # –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ ID
  python report_cli.py my_database execute 1 --format excel --output report.xlsx

  # –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –Ω–∞–∑–≤–æ—é –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
  python report_cli.py my_database execute "–ó–≤—ñ—Ç –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö" \\
    --filters '[{"field": "active", "operator": "=", "value": true}]' \\
    --output partners.csv --format csv

  # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  python report_cli.py my_database create --config report_config.json

  # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
  python report_cli.py my_database execute 1 --preview

  # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  python report_cli.py sample-config
        """)

    parser.add_argument('database', help='–ù–∞–∑–≤–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Odoo')
    parser.add_argument('command', choices=['list', 'execute', 'create', 'schedule', 'sample-config'],
                        help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è')

    # –ó–∞–≥–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    parser.add_argument('--user-id', type=int, default=SUPERUSER_ID,
                        help='ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: —Å—É–ø–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)')
    parser.add_argument('--verbose', '-v', action='store_true',
                        help='–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è list
    parser.add_argument('--templates-only', action='store_true',
                        help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —à–∞–±–ª–æ–Ω–∏')
    parser.add_argument('--include-inactive', action='store_true',
                        help='–í–∫–ª—é—á–∏—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∑–≤—ñ—Ç–∏')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è execute
    parser.add_argument('report_id', nargs='?',
                        help='ID –∞–±–æ –Ω–∞–∑–≤–∞ –∑–≤—ñ—Ç—É –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è')
    parser.add_argument('--format', choices=['excel', 'csv', 'json'],
                        default='excel', help='–§–æ—Ä–º–∞—Ç –µ–∫—Å–ø–æ—Ä—Ç—É')
    parser.add_argument('--output', '-o', help='–§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É')
    parser.add_argument('--filters', help='JSON –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏')
    parser.add_argument('--limit', type=int, help='–û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤')
    parser.add_argument('--preview', action='store_true',
                        help='–¢—ñ–ª—å–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ (–Ω–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ñ–∞–π–ª)')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è create
    parser.add_argument('--config', help='–§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É (JSON)')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è schedule
    parser.add_argument('--schedule-config', help='–§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ (JSON)')

    args = parser.parse_args()

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É
    if args.command == 'sample-config':
        create_sample_config()
        return 0

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
    if args.command == 'execute' and not args.report_id:
        parser.error("–ö–æ–º–∞–Ω–¥–∞ 'execute' –ø–æ—Ç—Ä–µ–±—É—î report_id")

    if args.command == 'create' and not args.config:
        parser.error("–ö–æ–º–∞–Ω–¥–∞ 'create' –ø–æ—Ç—Ä–µ–±—É—î --config")

    if args.command == 'schedule' and not args.schedule_config:
        parser.error("–ö–æ–º–∞–Ω–¥–∞ 'schedule' –ø–æ—Ç—Ä–µ–±—É—î --schedule-config")

    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
    try:
        with ReportCLI(args.database, args.user_id) as cli:
            success = False

            if args.command == 'list':
                success = cli.list_reports(
                    template_only=args.templates_only,
                    active_only=not args.include_inactive
                )

            elif args.command == 'execute':
                success = cli.execute_report(
                    report_identifier=args.report_id,
                    output_file=args.output,
                    export_format=args.format,
                    filters=args.filters,
                    limit=args.limit,
                    preview=args.preview
                )

            elif args.command == 'create':
                success = cli.create_report_from_config(args.config)

            elif args.command == 'schedule':
                with open(args.schedule_config, 'r', encoding='utf-8') as f:
                    schedule_config = json.load(f)
                success = cli.schedule_report(args.report_id, schedule_config)

            return 0 if success else 1

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return 130
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == '__main__':
    sys.exit(main())